from pyrcareworld.objects import RCareWorldBaseObject


class Skin(RCareWorldBaseObject):
    # Tactile sensors in RCareWorld
    def __init__(
        self,
        env,
        id: int,
        name: str,
        is_in_scene: bool = True,
    ):
        super().__init__(env=env, id=id, name=name, is_in_scene=is_in_scene)

    def getInfo(self) -> dict:
        """Get the information of the entire skin

        Returns:
            dict: A dict with "forces", "positions", and "ids" as the keys,
            and lists of the forces, positions, and ids as the values.

        """
        info_dict = {}
        info_dict["forces"] = self.env.instance_channel.data[self.id]["forces"]
        info_dict["positions"] = self.env.instance_channel.data[self.id]["positions"]
        info_dict["ids"] = self.env.instance_channel.data[self.id]["ids"]
        info_dict["skeleton_ids"] = self.env.instance_channel.data[self.id]["skeleton_ids"]
        return info_dict

    def getInfoByID(self, this_id: int) -> dict:
        """Get the information of a single tactile sensor by ID. This id is usually auto generated by TactileSensorHelper.

        Args:
            this_id (int): The id of the tactile sensor

        Raises:
            ValueError: Raise the Error if the id is not correct

        Returns:
            dict: A dict with id, force, and position
        """
        info_dict = self.getInfo()
        for i in len(info_dict["ids"]):
            if info_dict["ids"][i] == this_id:
                force = info_dict["forces"][i]
                position = info_dict["positions"][i]
                info_dict_id = {}
                info_dict_id["force"] = force
                info_dict_id["position"] = position
                info_dict_id["id"] = this_id
                return info_dict_id
        raise ValueError(f"id {this_id} not found")
        return {}
